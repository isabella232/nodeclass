<%
/* This template generates Class-functions bound to the new instance. */
/* Unfortunately non-native binding is faster than native http://jsperf.com/bind-vs-emulate/6 */
/* We're adding fake params a,b,c,... so the length-attribute of the generated function is correct */
var $params = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"];
%>
var self = this;

<% /* ensures that all functions are bound to the properties-object */ %>
<% _($thisProperties.private.method).each(function bindPrivateMethods($fn, $fnName) { %>
this.<%= $fnName %> = function (<%= $params.slice(0, $fn.length).join(",") %>) {
    return Class.<%= $fnName %>.apply(self, arguments);
};
<% }); %>
<% _($thisProperties.protected.method).each(function bindProtectedMethods($fn, $fnName) { %>
this.<%= $fnName %> = function (<%= $params.slice(0, $fn.length).join(",") %>) {
    return Class.<%= $fnName %>.apply(self, arguments);
};
<% }); %>
<% _($thisProperties.public.method).each(function bindPublicMethods($fn, $fnName) { %>
this.<%= $fnName %> = function (<%= $params.slice(0, $fn.length).join(",") %>) {
    return Class.<%= $fnName %>.apply(self, arguments);
};
<% }); %>