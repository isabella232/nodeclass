/*** COMPILED BY NODECLASS ********************************************************************************************/
(function createConstructor(Class) {
    var Constructor;

    function Properties(Instance, Super) {
        <%= $generate.methodBindings($classMap) %>
        this.Instance = Instance;
        this.Super = Super;
        <% /* hiding meta-properties */ %>
        this.Extends = undefined;
        this.init = undefined;
    }
    Properties.prototype = Class;

    (function () { <% /* self-executing function is necessary here because of shitty IE @see http://perfectionkills.com/a-closer-look-at-expression-closures/ */ %>
    Constructor = function <%= $classMap.className %>() {
        var instructions = Constructor["@"],
            args = arguments,
            constructAsSuperClass,
            properties,
            overriddenMethods,
            Super,
            Instance = this,
            childProperties,
            key;

        if (this === undefined) {
            throw new Error("(nodeclass) Cannot create Class: You're trying to instantiate a class without the new operator");
        }

        if (instructions) {
            delete Constructor["@"];
            if (instructions.doNothing) {
                <% /* doNothing is necessary to make the instanceof operator work */ %>
                return;
            }
            Instance = instructions.Instance || this; <% /* provides the reference to the first child class that can be obtained via this.Instance */ %>
            constructAsSuperClass = instructions.constructAsSuperClass; <% /* if true, the constructor function exposes all protected class members */ %>
            overriddenMethods = instructions.overriddenMethods;
            childProperties = instructions.childProperties;
            args = instructions.args || arguments;
        }

        <% if ($superProperties) { %>
        Super = function () {
            Class.Extends["@"] = {
                constructAsSuperClass: true,
                exportProtected: true,
                overriddenMethods: overriddenMethods,
                childProperties: properties,
                args: arguments,
                Instance: Instance
            };

            return new Class.Extends();
        };
        <% } %>
        if (childProperties) {
            childProperties.Super = this;
            childProperties = null; <% /* we don't need it anymore */ %>
        }

        properties = new Properties(Instance, Super);

        <% /* Exporting all public methods */ %>
        <%= $generate.publicExports($classMap) %>
        this.Class = Constructor;

        <% /* Exporting all protected methods */ %>
        if (constructAsSuperClass) {
            <%= $generate.protectedExports($classMap) %>
        }

        <% /* Creating overriddenMethods-object */ %>
        <% if ($superProperties && _($classMap.overriddenMethods).keys().length > 0) { %>
        overriddenMethods = overriddenMethods || {};
        <% _($classMap.overriddenMethods).each(function printOverriddenMethods(method, methodName) { %>
        overriddenMethods.<%= methodName %> = overriddenMethods.<%= methodName %> || properties.<%= methodName %>;
        <% }); %>
        <% } %>

        <% /* Overriding methods of properties-object */ %>
        for (key in overriddenMethods) {
            if (overriddenMethods.hasOwnProperty(key)) {
                properties[key] = overriddenMethods[key];
            }
        }

        <% /* Now we're calling the init-function */ %>
        <% if ($classMap.hasInit) { %>
        Class.init.apply(properties, args);
        <% } %>

        <% if ($superProperties) { %>
            <% /* if the init-function hasn't called this.Super() it's called now */ %>
        if (typeof properties.Super === "function") {
            Super.apply(null, args);
        };
        Super = properties.Super;

            <% /* Exporting all public super methods */ %>
            <%= $generate.superPublicExports($classMap) %>

            <% /* Exporting all protected super methods */ %>
        if (constructAsSuperClass) {
            <%= $generate.superProtectedExports($classMap) %>
        }
        <% } %>

        instructions = args = constructAsSuperClass = Super = childProperties = key = overriddenMethods = undefined; <% /* we don't need it anymore, so we're removing them from the scope of the setters / getters */ %>
    };
    }());

    <% /* Attaching static properties */ %>
    <%= $generate.staticExports($classMap) %>

    <% if ($superProperties) { %>
    Class.Extends["@"] = {
        doNothing: true
    };
    Constructor.prototype = new Class.Extends();
    <% } %>

    Constructor.Extends = Class.Extends;
    module.exports = Constructor;
    if (typeof <%= $classMap.className %> !== "undefined") {
        <%= $classMap.className %> = Constructor;
    }


})(module.exports);
/**********************************************************************************************************************/