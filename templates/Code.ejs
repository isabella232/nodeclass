/*** COMPILED BY NODECLASS ********************************************************************************************/
(function createConstructor(Class) {
    var Constructor;

    function Properties(Instance, Super) {
        this.Instance = Instance;
        this.Super = Super;
    }
    Properties.prototype = Class;

    Constructor = function <%= $classMap.className %>() {
        var instructions = Constructor["@"],
            exposeProtected,
            properties,
            overriddenMethods,
            Super = null,
            Instance = this,
            key;

        if (this === undefined) {
            throw new Error("(nodeclass) Cannot create Class: You're trying to instantiate a class without the new operator");
        }

        if (instructions) {
            Instance = instructions.Instance || this; <% /* provides the reference to the first child class that can be obtained via this.Instance */ %>
            exposeProtected = instructions.exposeProtected; <% /* if true, the constructor function exposes all protected class members */ %>
            overriddenMethods = instructions.overriddenMethods;
        }

        <% if ($superProperties) { %>
        Super = function () {
            this.Super = Class.Extends.$construct({
                exposeProtected: true,
                overriddenMethods: overriddenMethods,
                Instance: Instance
            }, arguments);
            return this.Super;
        };
        <% } %>

        properties = new Properties(Instance, Super);

        for (key in overriddenMethods) {
            if (overriddenMethods.hasOwnProperty(key)) {
                properties[key] = overriddenMethods[key];
            }
        }

        <% if ($superProperties && _($classMap.overriddenMethods).keys().length > 0) { %>
        overriddenMethods = overriddenMethods || {};
        <% _($classMap.overriddenMethods).each(function printOverriddenMethods(method, methodName) { %>
        overriddenMethods.<%= methodName %> = properties.<%= methodName %>.bind(properties);
        <% }); %>
        <% } %>

        <% if ($classMap.hasInit) { %>
        Class.init.apply(properties, arguments);
        <% } %>

        <% if ($superProperties) { %>
        <% /* if the init-function hasn't been called this.Super() it's called now */ %>
        if (typeof properties.Super === "function") {
            properties.Super.apply(properties, arguments);
        };
        Super = properties.Super;

        <% } %>

        <% /* Exporting all public methods */ %>
        <% _($thisProperties.public.attribute).each(function printPublicSetterGetter(value, key) { %>
        this.<%= $nameModifiers.setter(key) %> = function (value) { properties.<%= key %> = value; };
        this.<%= $nameModifiers.getter(key) %> = function () { return properties.<%= key %>; };
        <% }); %>
        <% if ($superProperties) { %>
            <% _($superProperties.public.method).each(function printPublicMethods(value, key) { %>
        this.<%= key %> = Super.<%= key %>.bind(properties);
            <% }); %>
        <% } %>
        <% _($thisProperties.public.method).each(function printPublicMethods(value, key) { %>
        this.<%= key %> = Class.<%= key %>.bind(properties);
        <% }); %>

        if (exposeProtected) {

            <% /* Exposing all protected methods */ %>
            <% _($thisProperties.protected.attribute).each(function printPublicSetterGetter(value, key) { %>
            this._<%= $nameModifiers.setter(key) %> = function (value) { properties.<%= key %> = value; };
            this._<%= $nameModifiers.getter(key) %> = function () { return properties.<%= key %>; };
            <% }); %>
            <% if ($superProperties) { %>
                <% _($superProperties.protected.method).each(function printProtectedMethods(value, key) { %>
            this.<%= key %> = Super.<%= key %>.bind(properties);
                <% }); %>
            <% } %>
            <% _($thisProperties.protected.method).each(function printProtectedMethods(value, key) { %>
            this.<%= key %> = Class.<%= key %>.bind(properties);
            <% }); %>

        }

        delete Constructor["@"];
    };

    <% /* Attaching static properties */ %>
    <% _($thisProperties.static.attribute).each(function printStaticAttribute(value, key) { %>
    Constructor.<%= $nameModifiers.trimPrefix(key) %> = Class.<%= key %>;
    <% }); %>
    <% _($thisProperties.static.method).each(function printStaticMethod(value, key) { %>
    Constructor.<%= $nameModifiers.trimPrefix(key) %> = Class.<%= key %>.bind(null);
    <% }); %>

    <% /* this special function is used to call the constructor with an argument-array since you cant use the .apply()-method with the new operator. */ %>
    Constructor.$construct = function (instructions, args) {
        function Instance() {
            return Constructor.apply(this, args);
        }
        Instance.prototype = Constructor.prototype;

        Constructor["@"] = instructions;

        return new Instance();
    };

    <% if ($superProperties) { %>
    Constructor.prototype = Class.Extends.prototype;
    <% } %>

    Constructor.Extends = Class.Extends;
    module.exports = Constructor;
    <%= $classMap.className %> = Constructor;

})(module.exports);
/**********************************************************************************************************************/