/*** COMPILED BY NODECLASS ********************************************************************************************/
(function createConstructor(Class) {
    var Constructor;

    function Properties(Instance, Super) {
        <%= $generate.methodBindings($classMap) %>
        this.Instance = Instance;
        this.Super = Super;
    }
    Properties.prototype = Class;

    (function () { <% /* self-executing function is necessary here because of shitty IE @see http://perfectionkills.com/a-closer-look-at-expression-closures/ */ %>
    Constructor = function <%= $classMap.className %>() {
        var instructions = Constructor["@"],
            exportProtected,
            properties,
            overriddenMethods,
            Super,
            Instance = this,
            key;

        if (this === undefined) {
            throw new Error("(nodeclass) Cannot create Class: You're trying to instantiate a class without the new operator");
        }

        if (instructions) {
            if (instructions.doNothing) {
                <% /* doNothing is necessary to make the instanceof operator work */ %>
                delete Constructor["@"];
                return;
            }
            Instance = instructions.Instance || this; <% /* provides the reference to the first child class that can be obtained via this.Instance */ %>
            exportProtected = instructions.exportProtected; <% /* if true, the constructor function exposes all protected class members */ %>
            overriddenMethods = instructions.overriddenMethods;
        }

        <% if ($superProperties) { %>
        Super = function () {
            properties.Super = Class.Extends.$construct({
                exportProtected: true,
                overriddenMethods: overriddenMethods,
                Instance: Instance
            }, arguments);
            return properties.Super;
        };
        <% } %>

        properties = new Properties(Instance, Super);
        this.Class = Constructor;

        for (key in overriddenMethods) {
            if (overriddenMethods.hasOwnProperty(key)) {
                properties[key] = overriddenMethods[key];
            }
        }

        <% if ($superProperties && _($classMap.overriddenMethods).keys().length > 0) { %>
        overriddenMethods = overriddenMethods || {};
        <% _($classMap.overriddenMethods).each(function printOverriddenMethods(method, methodName) { %>
        overriddenMethods.<%= methodName %> = properties.<%= methodName %>.bind(properties);
        <% }); %>
        <% } %>

        <% if ($classMap.hasInit) { %>
        Class.init.apply(properties, arguments);
        <% } %>

        <% if ($superProperties) { %>
        <% /* if the init-function hasn't been called this.Super() it's called now */ %>
        if (typeof properties.Super === "function") {
            properties.Super.apply(null, arguments);
        };
        Super = properties.Super;

        <% } %>

        <% /* Exporting all public methods */ %>
        <%= $generate.publicExports($classMap) %>

        if (exportProtected) {
            <% /* Exporting all protected methods */ %>
            <%= $generate.protectedExports($classMap) %>
        }

        delete Constructor["@"];
    };
    }());

    <% /* Attaching static properties */ %>
    <%= $generate.staticExports($classMap) %>

    <% /* this special function is used to call the constructor with an argument-array since you cant use the .apply()-method with the new operator. */ %>
    Constructor.$construct = function (instructions, args) {
        function <%= $classMap.className %>() {
            return Constructor.apply(this, args);
        }
        <%= $classMap.className %>.prototype = Constructor.prototype;

        Constructor["@"] = instructions;

        return new <%= $classMap.className %>();
    };

    <% if ($superProperties) { %>
    Constructor.prototype = Class.Extends.$construct({
        doNothing: true
    });
    <% } %>

    Constructor.Extends = Class.Extends;
    module.exports = Constructor;
    if (typeof <%= $classMap.className %> !== "undefined") {
        <%= $classMap.className %> = Constructor;
    }


})(module.exports);
/**********************************************************************************************************************/